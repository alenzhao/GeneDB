#!/software/bin/perl -wT
#########
# Author:        rmp
# Maintainer:    rmp
# Created:       2002-03-08
# Last Modified: 2002-10-11
#
#
package getblast;

my ($sw, $blank_gif, $form_number);

# You can't put use lib "/nfs/WWW/SANGER_docs/perl"
# in a conditional statement - it gets executed ragardless!
# Play with @INC instead
#
BEGIN {
    #unshift(@INC, "/nfs/WWW/SANGER_docs/perl");
    #unshift(@INC, "/nfs/WWW/SANGER_docs/bin-offline");
    #unshift(@INC, "/nfs/WWW/SANGER_docs/perl/bioperl-live");

            unshift(@INC, "../cgi-support");
            unshift(@INC, "../cgi-support/bioperl-live");
            require "GeneDB_Web.pm";
            $sw        = GeneDB_Web->new({
                'title'  => "Fasta Sequence Lookup",
                'banner' => "Fasta Sequence Lookup",
            });
            $blank_gif   = "/images/reallyBlank.gif";
            $form_number = 1;
}

use strict;
use CGI;
use Website::Blast::Util;
use Bio::Seq;

BEGIN: {
  $ENV{'PATH'} = "/bin";
}


&main();

sub main {
  $|       = 1;
  local $/ = "\n";

  my $cgi  = CGI->new();
  my $util = Website::Blast::Util->new();

  my $fastaline = 60;
  my $openhit   = qq();
  my $closehit  = qq();
  my $database  = $cgi->param('db');
  my $acc       = $cgi->param('acc');
  my $format    = $cgi->param('format') || "no";
  my $hitstart  = $cgi->param('start');
  my $hitend    = $cgi->param('end');
  my $seqval    = $cgi->param('seqval');
  my $id        = $cgi->param('id');
  my $view      = $cgi->param('view')   || "no";

  if($view eq "no") {
    $openhit   = qq(<a name="Match"></a><span style="background-color: #e2e2ff;color: #a00000;">);
    $closehit  = qq(</span>);
  }

  undef($seqval) if(defined $seqval && $seqval eq "all");

  if($format eq "dl") {
    print qq(Content-type: application/octet-stream\n\n);
  } else {
    print $sw->header();
  }

  if(!defined $database && !defined $acc) {
    ($database, $acc, $format) = split(/\+/, $ENV{'QUERY_STRING'});
    if(defined $format) {
      $format = "yes";
    } else {
      $format = "no";
    }
  }

  # This is a work around for GeneDB that uses pubseq blast executables, thus /data/blastdb will be
  # present...
  #my $database_stripped = $database;

  #if( defined $ENV{"WEB_ROLE"} ){
  #    if( $database =~ m|/data/blastdb/| ){
  #        ($database_stripped) = ($database =~ m|^/data/blastdb/(.*)$|);
  #    }
  #}
  #my $dbpath    = $util->database($database_stripped);

  my $dbpath    = $util->database($database);
  ($dbpath)     = $dbpath   =~ /([a-zA-Z0-9\/\_\-\.]+)/  if(defined $dbpath);
  ($database)   = $database =~ /([a-zA-Z0-9\/\_\-\.]+)/  if(defined $database);
  ($acc)        = $acc      =~ /([a-zA-Z0-9\/\_\-\.,:]+)/ if(defined $acc);
  ($id)         = $id       =~ /([a-zA-Z0-9\/\_\-\.,]+)/ if(defined $id);
  ($hitstart)   = $hitstart =~ /([0-9]+)/ if(defined $hitstart);
  ($hitend)     = $hitend   =~ /([0-9]+)/ if(defined $hitend);
  ($seqval)     = $seqval   =~ /([0-9]+)/ if(defined $seqval);
  my $counter   = 0;
  my $bytecount = 0;
  my $timeout   = 190;
  my $idtxt     = ";id=$id" if(defined $id);
  my $cachefn   = $dbpath . "_" . $acc;
  $cachefn      =~ s/\//_/g;
  $cachefn      = $GETSEQCACHE . "/" . $cachefn;

  eval {
    unless(-f "$cachefn") {
      print STDERR "$BSUB -I -q fast \"$FETCHDB $BLASTDB/$dbpath '$acc'\" > $cachefn 2>/dev/null\n"; # DEBUG
      `$BSUB -I -q fast "$FETCHDB $BLASTDB/$dbpath '$acc'" > $cachefn 2>/dev/null`;
    }
  };

  my $hitst = undef;
  my $hited = undef;

  if(defined $acc && defined $database) {
    eval {
      my $cmd        = "";
      my $reallength = 0;

      if (!defined $seqval){
        $cmd = qq($PUBSEQFETCHDB $cachefn '$acc' 2>/dev/null);
      } else {
        $hitst       = $hitstart-$seqval;
        $hited       = $hitend+$seqval;
    my $expected = $hited - $hitst +1;
    $hitst       = 1 if($hitst < 1);
        $bytecount   = $hitst-1;

        $cmd = qq($PUBSEQFETCHDB  -f -s $hitst -e $hited $cachefn '$acc' 2>/dev/null);

    #########
    # first pass to calculate length
    #
    open(FETCHDB, qq($PUBSEQFETCHDB -q -s $hitst -e $hited $cachefn '$acc' 2>/dev/null |)) || die "oops";
    while(defined(my $line = <FETCHDB>)) {
      chomp $line;
      next if(substr($line, 0, 1) eq ">");
      $reallength += length($line);
    }
    close(FETCHDB);

    if($expected != $reallength && $format ne "dl") {
      print qq(<br /><b>WARNING: Requested HSP extension is out of range. Boundaries have been clipped.</b><br />\n);
    }
    if($reallength == 0) {
      print qq(<br /><b>WARNING: Could not find sequence $dbpath $acc.<br /><br />\n);
    }

      }

      open(FETCHDB, qq($cmd |)) || die "oops";
      while(defined(my $line = <FETCHDB>)) {
    chomp $line;

    if (substr($line, 0, 1) eq ">" && $format ne "dl") {
      my ($name)       = $line =~ /^>\s*(\S+)/;
      $name          ||= "unknown";
      my $starttxt     = $hitstart?";start=$hitstart":"";
      my $endtxt       = $hitend?";end=$hitend":"";
      my $formattoggle = "no";
      my $seqvaltxt    = "";
      my $formattxt    = "Plain";
      $formattoggle    = "yes"             if($format eq "no");
      $formattxt       = "Formatted"       if($format eq "no");
      $seqvaltxt       = ";seqval=$seqval" if(defined $seqval);

      print qq(<br />);
      print qq([<a href="$ENV{'SCRIPT_NAME'}?db=$database;acc=$acc;format=$formattoggle;view=$view$idtxt$starttxt$endtxt$seqvaltxt#Match">$formattxt Fasta Sequence</a>] );
      print qq([<a href="$ENV{'SCRIPT_NAME'}?db=$database;acc=$acc;format=dl$idtxt$starttxt$endtxt$seqvaltxt">Download this sequence</a>] );

      if((defined $hitstart || defined $hitend) && $view eq "no") {
        print qq([<A href="#Match">Jump to HSP</A>] );

        my %formval = (
               50   => '50',
               100  => '100',
               200  => '200',
               300  => '300',
               500  => '500',
               1000 => '1K',
               2000 => '2K',
              );
        print qq(<form method="GET" action="$ENV{'SCRIPT_NAME'}">Show <select name="seqval" onChange="document.forms[$form_number].submit();"> );
        my $selected = "";
        $selected    = "selected" if (!defined $seqval);
        print qq(  <option value="all" $selected>full sequence</option>\n);

        for my $key (sort {$a <=> $b} keys %formval) {
          my $selected = "";
          $selected    = "selected" if (defined $seqval && $seqval eq $key);
          print qq(  <option value="$key" $selected>HSP &plusmn; $formval{$key}</option>\n);
        }

        print qq(</select>);

        print qq(<input type="hidden" name="db" value="$database">
  <input type="hidden" name="acc"    value="$acc">
  <input type="hidden" name="start"  value="$hitstart">
  <input type="hidden" name="end"    value="$hitend">
  <input type="hidden" name="format" value="$format">
  <input type="submit" value="go">
</form>\n);
      }

      if(defined $seqval) {
        my $start = $hitst;
        my $end   = $hitst+$reallength-1;

        if($view eq "no") {
          print qq(<pre><b>&gt;$name subsequence $start-$end</b>\n);

        } else {
          print qq(<pre><b>$line; subsequence $start-$end</b>\n);
        }

      } else {
        print qq(<pre><b>$line</b>\n);
      }

    } elsif(substr($line, 0, 1) eq ">" && $format eq "dl") {
      my ($name)   = $line =~ /^>\s*(\S+)/;
      $name      ||= "unknown";

      if(defined $seqval) {
        my $start = $hitst;
        my $end   = $start+$reallength-1;
        print qq(>$name subsequence $start-$end\n);

      } else {
        print $line, "\n";
      }

    } else {
      my $linelength   = length($line);
      my $linestart    = $bytecount+1;
      my $lineend      = $bytecount+$linelength;
      $bytecount      += $linelength;
      my $tmpline      = $line;
      my $tmpfastaline = $fastaline;
      my $justopened   = undef;
      my $justclosed   = undef;

      if(defined $hitstart && $hitstart >= $linestart && $hitstart <= $lineend) {
        my $pos = $hitstart - $linestart;
        substr($tmpline, $pos, 0) = $openhit if($pos >= 0);
        $justopened = 1;
      }

      if(defined $hitend && $hitend >= $linestart && $hitend <= $lineend) {
        my $pos = $hitend - $lineend;
        if($pos < 0) {
          substr($tmpline, $pos, 0) = $closehit;
        } else {
          $tmpline .= $closehit;
        }
        $justclosed = 1;
      }

      if($format eq "yes") {
        my $startnum = sprintf("<b>%-9d</b>", $linestart);
        $startnum   .= $openhit if($hitstart && $hitend && $linestart >= $hitstart && $linestart <= $hitend && !$justopened);

        my $endnum   = sprintf("<b>%9d</b>", $lineend);
        $endnum      = $closehit . $endnum if($hitstart && $hitend && $lineend >= $hitstart && $lineend <= $hitend && !$justclosed);

        my $newline  = sprintf("%s%-${fastaline}s%s\n", $startnum, $line, $endnum);
        $newline     =~ s/$line/$tmpline/;
        print $newline;

      } else {
        my $newline = $line;
        if($format ne "dl") {
          $newline    =~ s/$line/$tmpline/;
        }
        print $newline, "\n";
      }

    }
           $counter++;
      }
      close(FETCHDB);
    };

    if($@) {
      print qq(Warning: Failed to retrieve data for $acc in $database using fetchdb.<br />\n);
      print qq(Please try the FTP site: <a href="ftp://ftp.sanger.ac.uk/pub/">ftp.sanger.ac.uk</a><br />\n);
    }

  } else {
    print qq(No database given.\n)  if(!defined $database);
    print qq(No accession given.\n) if(!defined $acc);
  }

  if($format ne "dl") {
    print qq(</pre>\n);
    print $sw->footer();
  }
}
1;
