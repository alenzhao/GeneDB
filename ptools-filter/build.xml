<!--
     General purpose build script for web applications and web services,
     including enhanced support for deploying directly to a Tomcat 4
     based server.

     This build script assumes that the source code of your web application
     is organized into the following subdirectories underneath the source
     code directory from which you execute the build script:

        docs                 Static documentation files to be copied to
                             the "docs" subdirectory of your distribution.

        src                  Java source code (and associated resource files)
                             to be compiled to the "WEB-INF/classes"
                             subdirectory of your web applicaiton.

        web                  Static HTML, JSP, and other content (such as
                             image files), including the WEB-INF subdirectory
                             and its configuration file contents.

     $Id: build.xml,v 1.1 2006-12-22 20:53:52 art Exp $
-->


<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="ptools-filter" default="deploy" basedir=".">


	<!-- ===================== Property Definitions =========================== -->
	<property name="build.home"    value="${basedir}/ant-build"/>
	<property name="src.home"      value="${basedir}/src"/>
	<property name="webapp.staging" value="${build.home}/webapp" />

	<property name="finaldest.basedir" value="/raid0/genedb/prod/webapps" />
	<property name="finaldest.webapps" value="${finaldest.basedir}/ptools-filter" />


	<!--  ==================== Compilation Control Options ==================== 
     These properties control option settings on the Javac compiler when it
     is invoked using the <javac> task.
    -->
	<property name="compile.debug"       value="false"/>
	<property name="compile.deprecation" value="true"/>
	<property name="compile.optimize"    value="true"/>


	<!-- ==================== Compilation Classpath =========================== -->
	<path id="compile.classpath">
		<pathelement location="lib/servlet-api.jar"/>
		
		<pathelement location="web/WEB-INF/lib/spring-2.0.1.jar"/>
	</path>
	
	<target name="deploy" depends="prepare_staging, compile">
		<mkdir dir="${finaldest.webapps}.tmp"/>
		<copy todir="${finaldest.webapps}.tmp">
			<fileset dir="${webapp.staging}" casesensitive="false" followSymLinks="false" />
		</copy>
	</target>
	
	
	<target name="final_deploy">
		<!-- Do  moves, then rm -->
		<delete dir="${finaldest.webapps}.old" failonerror="false"/>
		<move file="${finaldest.webapps}" tofile="${finaldest.webapps}.old" />
		<move file="${finaldest.webapps}.tmp" tofile="${finaldest.webapps}" />
		<delete dir="${finaldest.webapps}.old" />
	</target>
	
	
	<target name="init">
		<!-- Create build directories as needed -->
		<mkdir dir="${build.home}"/>
		<mkdir dir="${webapp.staging}" />
		<mkdir dir="${build.home}/classes"/>
	</target>
	
	<target name="compile" depends="init"
  	 description="Compile Java sources">

		<javac srcdir="${src.home}"
          destdir="${webapp.staging}/WEB-INF/classes"
            debug="${compile.debug}"
      deprecation="${compile.deprecation}"
         optimize="${compile.optimize}">
			<classpath refid="compile.classpath"/>
		</javac>
	</target>
	
	
	<target name="prepare_staging" depends="init">
		<copy todir="${webapp.staging}">
			<fileset dir="web" casesensitive="false" followSymLinks="false" />
		</copy>
	</target>

	
	<!-- ==================== Clean Target ==================================== -->
	<!-- The "clean" target deletes any previous "build" and "dist" directory,
          so that you can be ensured the application can be built from scratch. -->
	<target name="clean"
            description="Delete build directories">
		<delete dir="${build.home}" failonerror="false"/>
		<delete dir="${finaldest.webapps}.tmp" failonerror="false"/>
	</target>
	
	
</project>
