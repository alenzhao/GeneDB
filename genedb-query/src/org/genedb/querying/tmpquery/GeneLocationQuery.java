package org.genedb.querying.tmpquery;

import java.util.ArrayList;
import java.util.List;

import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;
import org.hibernate.validator.NotEmpty;
import org.springframework.validation.Errors;

@QueryClass(
        title="Transcripts by their type",
        shortDesc="Get a list of transcripts by type",
        longDesc=""
    )
public class GeneLocationQuery extends OrganismHqlQuery {

    //private static final Logger logger = Logger.getLogger(GeneLocationQuery.class);

    @QueryParam(
            order=1,
            title="Name of feature"
    )
    @NotEmpty(message="{topLevelFeatureName.empty}")
    private String topLevelFeatureName;


    @QueryParam(
            order=2,
            title="Min coordinate"
    )
    private int min;


    @QueryParam(
            order=3,
            title="Max coordinate"
    )
    private int max;

    @Override
    protected String getHql() {
        return "select f.uniqueName " +
        		"from Feature f inner join f.featureLocs fl " +
        		"where fl.sourceFeature.uniqueName=:topLevelFeatureName " +
        		"and fl.fmin >= :min " +
        		"and fl.fmax <= :max @ORGANISM@ " +
        		RESTRICT_TO_TRANSCRIPTS + //FIX_ME
        		"order by f.organism, f.uniqueName";
    }


//    public Map<String, Object> prepareModelData() {
//        Map<String, String> typeMap = new HashMap<String, String>();
//        typeMap.put("mRNA", "protein-coding");
//        typeMap.put("pseudogene", "pseudogenic transcript");
//        typeMap.put("tRNA", "tRNA");
//        typeMap.put("snoRNA", "snoRNA");
//
//        Map<String, Object> ret = new HashMap<String, Object>();
//        ret.put("typeMap", typeMap);
//        return ret;
//    }

    // ------ Autogenerated code below here

    public void setTopLevelFeatureName(String topLevelFeatureName) {
        this.topLevelFeatureName = topLevelFeatureName;
    }

    public String getTopLevelFeatureName() {
        return topLevelFeatureName;
    }


    public int getMin() {
        return min;
    }


    public int getMax() {
        return max;
    }


    public void setMin(int min) {
        this.min = min;
    }

    public void setMax(int max) {
        this.max = max;
    }


    @Override
    protected String[] getParamNames() {
        return new String[] {"topLevelFeatureName", "min", "max"};
    }

    @Override
    protected void populateQueryWithParams(org.hibernate.Query query) {
        super.populateQueryWithParams(query);
        query.setString("topLevelFeatureName", topLevelFeatureName);
        query.setInteger("min", min);
        query.setInteger("max", max);    }


    @Override
    protected void extraValidation(Errors errors) {

        //validate dependent properties
        if (!errors.hasErrors()) {
            if (getMin() > getMax()) {
                errors.reject("start.greater.than.end");
            }
        }
    }

}
