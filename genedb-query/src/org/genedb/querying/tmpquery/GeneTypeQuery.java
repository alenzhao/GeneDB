package org.genedb.querying.tmpquery;

import org.genedb.querying.core.HqlQuery;
import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;

import org.hibernate.CacheMode;
import org.hibernate.FlushMode;
import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.Query;
import org.hibernate.ScrollMode;
import org.hibernate.ScrollableResults;
import org.hibernate.transform.ResultTransformer;
import org.hibernate.type.Type;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;

@QueryClass(
        title="Transcripts by their type",
        shortDesc="Get a list of transcripts by type",
        longDesc=""
    )
public class GeneTypeQuery extends HqlQuery {

    @QueryParam(
            order=1,
            title="Type of transcript"
    )
    private String type = "Coding";

    @Override
    protected String getHql() {
        return "select f.uniqueName from Feature f where f.cvTerm.name=:type";
    }

    // ------ Autogenerated code below here

    public void setType(String type) {
        this.type = type;
    }

	@Override
	protected String[] getParamNames() {
		return new String[] {"type"};
	}

	@Override
	protected void populateQueryWithParams(org.hibernate.Query query) {
		query.setString("type", type);
	}

}
