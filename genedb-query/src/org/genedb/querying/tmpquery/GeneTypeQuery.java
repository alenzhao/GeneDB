package org.genedb.querying.tmpquery;

import org.genedb.querying.core.HqlQuery;
import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;

import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

import java.util.HashMap;
import java.util.Map;

@QueryClass(
        title="Transcripts by their type",
        shortDesc="Get a list of transcripts by type",
        longDesc=""
    )
public class GeneTypeQuery extends HqlQuery {

    @QueryParam(
            order=1,
            title="Type of transcript"
    )
    private String type = "mRNA";

    @Override
    protected String getHql() {
        return "select f.uniqueName from Feature f where f.type.name=:type order by f.organism";
    }
    

    @Override
    protected String getOrganismHql() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    public Map<String, Object> prepareModelData() {
        Map<String, String> typeMap = new HashMap<String, String>();
        typeMap.put("mRNA", "protein-coding");
        typeMap.put("pseudogene", "pseudogenic transcript");
        typeMap.put("tRNA", "tRNA");
        typeMap.put("snoRNA", "snoRNA");

        Map<String, Object> ret = new HashMap<String, Object>();
        ret.put("typeMap", typeMap);
        return ret;
    }

    // ------ Autogenerated code below here

    public void setType(String type) {
        this.type = type;
    }

    public String getType() {
        return type;
    }

    @Override
    protected String[] getParamNames() {
        return new String[] {"type"};
    }

    @Override
    protected void populateQueryWithParams(org.hibernate.Query query) {
        query.setString("type", type);
    }


    public Validator getValidator() {
        return new Validator() {
            @Override
            @SuppressWarnings("unused")
            public void validate(Object target, Errors errors) {
                return;
            }

            @Override
            @SuppressWarnings("unchecked")
            public boolean supports(Class clazz) {
                return GeneTypeQuery.class.isAssignableFrom(clazz);
            }
        };
    }



}
