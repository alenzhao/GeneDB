package org.genedb.querying.tmpquery;

import org.genedb.querying.core.HqlQuery;    
import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;
import org.hibernate.validator.ClassValidator;
import org.hibernate.validator.InvalidValue;
import org.hibernate.validator.Max;
import org.hibernate.validator.Min;

import org.springframework.validation.Errors;
import org.springframework.validation.Validator;

@QueryClass(
        title="Coding and pseudogenes by protein length",
        shortDesc="Get a list of transcripts ",
        longDesc=""
    )
public class ProteinLengthQuery extends HqlQuery {

    @QueryParam(
            order=1,
            title="Minimum length of protein in bases"
    )

    @Min(value=50, message="{min.minimum}")
    private int min = 50;

    @QueryParam(
            order=2,
            title="Maximum length of protein in bases"
    )
   
    @Max(value=500, message="{max.maximum}")
    private int max = 500;

    @Override
    protected String getHql() {
        return "select f.uniqueName from Feature f where f.type.name='polypeptide' and f.seqLen >= :min and f.seqLen <= :max order by f.organism";
    }
    
    @Override
	protected String getOrganismHql() {
		// TODO Auto-generated method stub
		return null;
	}

    // ------ Autogenerated code below here

    public void setMin(int min) {
        this.min = min;
    }

    public void setMax(int max) {
        this.max = max;
    }

    public int getMin() {
        return min;
    }

    public int getMax() {
        return max;
    }

    @Override
    protected String[] getParamNames() {
        return new String[] {"min", "max"};
    }

    @Override
    protected void populateQueryWithParams(org.hibernate.Query query) {
        query.setInteger("min", min);
        query.setInteger("max", max);
    }


    public Validator getValidator() {
        return new Validator() {
            @Override
            public void validate(Object target, Errors errors) {
                ClassValidator<ProteinLengthQuery> lengthQueryValidator = new ClassValidator<ProteinLengthQuery>(ProteinLengthQuery.class);     
                ProteinLengthQuery query = (ProteinLengthQuery)target;
                 InvalidValue[] invalids = lengthQueryValidator.getInvalidValues(query);
                for (InvalidValue invalidValue: invalids){
                	errors.rejectValue(invalidValue.getPropertyPath(), null, invalidValue.getMessage());
                }
                
                //validate dependent properties
                if (!errors.hasErrors()){
                	int min = query.getMin();
                	int max = query.getMax();
                	if(min > max){
                		errors.reject("min.greater.than.max");
                	}
                }
                return;
            }

            @Override
            @SuppressWarnings("unchecked")
            public boolean supports(Class clazz) {
                return ProteinLengthQuery.class.isAssignableFrom(clazz);
            }
        };
    }

}
