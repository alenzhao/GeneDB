package org.genedb.querying.tmpquery;

import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;
import org.hibernate.validator.NotEmpty;

import org.apache.lucene.index.Term;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.WildcardQuery;
import org.apache.lucene.search.BooleanClause.Occur;
import org.springframework.util.StringUtils;

import java.util.List;

@QueryClass(
        title="Coding and pseudogenes by protein length",
        shortDesc="Get a list of transcripts ",
        longDesc=""
    )
public class AllNameProductQuery extends OrganismLuceneQuery {

    @QueryParam(
            order=1,
            title="The search string"
    )
    @NotEmpty(message="{all.name.query.empty}")
    private String search = "";

    @QueryParam(
            order=1,
            title="Search gene products?"
    )
    private boolean product;

    @QueryParam(
            order=1,
            title="Search gene names and synonyms?"
    )
    private boolean allNames;

    @QueryParam(
            order=1,
            title="Include pseudogenes"
    )
    private boolean pseudogenes;

    @QueryParam(
            order=1,
            title="Include obsolete features"
    )
    private boolean obsolete = false;


    @Override
    protected String getluceneIndexName() {
        return "org.gmod.schema.mapped.Feature";
    }

    @Override
    protected void getQueryTerms(List<org.apache.lucene.search.Query> queries) {

        BooleanQuery bq = new BooleanQuery();
        if(StringUtils.containsWhitespace(search)) {
            for(String term : search.split(" ")) {
                bq.add(new TermQuery(new Term("product",term.toLowerCase()
                    )), Occur.SHOULD);
            }
        } else {
            if (search.indexOf('*') == -1) {
                if (allNames) {
                    bq.add(new TermQuery(new Term("allNames",search.toLowerCase())), Occur.SHOULD);
                }
                if (product) {
                    bq.add(new TermQuery(new Term("product",search.toLowerCase())), Occur.SHOULD);
                }
            } else {
                if (allNames) {
                    bq.add(new WildcardQuery(new Term("allNames", search.toLowerCase())), Occur.SHOULD);
                }
                if (product) {
                    bq.add(new WildcardQuery(new Term("product", search.toLowerCase())), Occur.SHOULD);
                }
            }
        }

        queries.add(bq);
        if (pseudogenes) {
            queries.add(geneOrPseudogeneQuery);
        } else {
            queries.add(geneQuery);
        }

        if (!obsolete) {
            queries.add(isCurrentQuery);
        }

//        BooleanQuery organismQuery = makeQueryForOrganisms(orgNames);
//        queries.add(organismQuery);
    }

    // ------ Autogenerated code below here

    public void setSearch(String search) {
        this.search = search;
    }

    public String getSearch() {
        return search;
    }

    public boolean isProduct() {
        return product;
    }

    public void setProduct(boolean product) {
        this.product = product;
    }

    public boolean isAllNames() {
        return allNames;
    }

    public void setAllNames(boolean allNames) {
        this.allNames = allNames;
    }

    public boolean isPseudogenes() {
        return pseudogenes;
    }

    public void setPseudogenes(boolean pseudogenes) {
        this.pseudogenes = pseudogenes;
    }

//    public boolean isObsolete() {
//        return obsolete;
//    }
//
//    public void setObsolete(boolean obsolete) {
//        this.obsolete = obsolete;
//    }

    @Override
    protected String[] getParamNames() {
        return new String[] {"search", "product", "allNames", "pseudogenes"};
    }


}
