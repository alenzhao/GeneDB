package org.genedb.querying.tmpquery;

import org.genedb.querying.core.LuceneQuery;
import org.genedb.querying.core.QueryClass;
import org.genedb.querying.core.QueryParam;

import org.apache.lucene.index.Term;
import org.apache.lucene.search.BooleanQuery;
import org.apache.lucene.search.RangeQuery;
import org.apache.lucene.search.TermQuery;
import org.apache.lucene.search.WildcardQuery;
import org.apache.lucene.search.BooleanClause.Occur;
import org.springframework.util.StringUtils;

import java.io.IOException;
import java.util.Collection;
import java.util.List;

@QueryClass(
        title="Coding and pseudogenes by protein length",
        shortDesc="Get a list of transcripts ",
        longDesc=""
    )
public class ProteinNumTMQuery extends LuceneQuery {

    @QueryParam(
            order=1,
            title="Minimum length of protein in bases"
    )
    private int min = 1;

    @QueryParam(
            order=2,
            title="Minimum length of protein in bases"
    )
    private int max = 5;


	@Override
	protected String getluceneIndexName() {
		return "org.gmod.schema.mapped.Feature";
	}

    protected void getQueryTerms(List<org.apache.lucene.search.Query> queries) {

        Term lowerTerm = new Term("numTMDomains", Integer.toString(min));
        Term upperTerm = new Term("numTMDomains", Integer.toString(max));
    	RangeQuery rq = new RangeQuery(lowerTerm, upperTerm, true);

        queries.add(rq);
        queries.add(geneOrPseudogeneQuery);


//        BooleanQuery organismQuery = makeQueryForOrganisms(orgNames);
//        queries.add(organismQuery);
    }

    // ------ Autogenerated code below here



	public int getMin() {
        return min;
    }

    public void setMin(int min) {
        this.min = min;
    }

    public int getMax() {
        return max;
    }

    public void setMax(int max) {
        this.max = max;
    }

    @Override
	protected String[] getParamNames() {
		return new String[] {"min", "max"};
	}


}
