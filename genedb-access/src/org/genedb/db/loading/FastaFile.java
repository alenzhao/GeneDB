package org.genedb.db.loading;

import org.apache.log4j.Logger;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.NoSuchElementException;

/**
 * Represents a FASTA file, and allows the records in the file to
 * be iterated over, lazily, in order.
 *
 * @author rh11
 *
 */
public class FastaFile implements Iterable<FastaRecord> {
    private static final Logger logger = Logger.getLogger(FastaFile.class);

    private File file;
    private BufferedReader br;

    public FastaFile(File file) throws IOException {
        this.file = file;
        this.br = new BufferedReader(new FileReader(file));
    }

    public Iterator<FastaRecord> iterator() {
        if (br == null) {
            try {
                br = new BufferedReader(new FileReader(file));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
        return new Iterator<FastaRecord>() {
            int lineNumber = 1;
            private String nextLine;

            { // Instance initializer
                try {
                    nextLine = br.readLine();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }

            public boolean hasNext() {
                boolean hasNext = (nextLine != null);
                if (!hasNext) {
                    try {
                        br.close();
                        br = null;
                    } catch (IOException e) {
                        logger.warn("Error while closing file", e);
                    }
                }
                return hasNext;
            }

            public FastaRecord next() {
                if (nextLine == null) {
                    throw new NoSuchElementException();
                }
                if (! nextLine.startsWith(">")) {
                    throw new RuntimeException("FASTA record does not begin with '>' at line " + lineNumber);
                }
                String id = nextLine.substring(1);
                int pipeIndex = nextLine.indexOf("|");
                if (pipeIndex > -1) {
                    id = nextLine.substring(1, pipeIndex);
                }

                StringBuilder sequence = new StringBuilder();
                String thisLine;
                for(;;) {
                    try {
                        thisLine = br.readLine();
                        lineNumber++;
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                    if (thisLine == null || thisLine.startsWith(">")) {
                        break;
                    } else {
                        sequence.append(thisLine.toLowerCase());
                    }
                }
                this.nextLine = thisLine;

                return new FastaRecord(id, sequence.toString());
            }

            public void remove() {
                throw new UnsupportedOperationException("remove() not supported");
            }
        };
    }
}

class FastaRecord {
    private String id;
    private String sequence;

    FastaRecord(String id, String sequence) {
        this.id = id;
        this.sequence = sequence;
    }

    public String getId() {
        return this.id;
    }

    public String getSequence() {
        return this.sequence;
    }

    // hashCode and equals methods generated by Eclipse.
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((id == null) ? 0 : id.hashCode());
        result = prime * result + ((sequence == null) ? 0 : sequence.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final FastaRecord other = (FastaRecord) obj;
        if (id == null) {
            if (other.id != null)
                return false;
        } else if (!id.equals(other.id))
            return false;
        if (sequence == null) {
            if (other.sequence != null)
                return false;
        } else if (!sequence.equals(other.sequence))
            return false;
        return true;
    }

}
