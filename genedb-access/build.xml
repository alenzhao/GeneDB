<?xml version="1.0"?>

<project name="genedb-access" default="fulljar-access" basedir=".">

        <!-- If this file is imported into another build.xml, resolve filenames
             relative to here rather than the importing project. -->
  <dirname property="imported.basedir.access" file="${ant.file.genedb-access}"/>

  <import file="${imported.basedir.access}/../genedb-libs/build.xml"/>
  <import file="${imported.basedir.access}/../genedb-db/build.xml"/>
  <import file="${imported.basedir.access}/../genedb-util/build.xml"/>

  <property file="property-file.${load}" />
  <property name="lib-dir" value="${imported.basedir.libs}/lib/"/>

  <path id="access-classpath">
      <fileset dir="${imported.basedir.access}/lib">
        <include name="*.jar"/>
      </fileset>
      <pathelement location="${lib-dir}/biojava/biojava-1.6.jar"/>
      <pathelement location="${genedb-util.jar}"/>
      <pathelement location="${genedb-db.jar}"/>
  </path>


  <target name="init-access">
    <init project="access"/>
  </target>

  <target name="compile-access" depends="init-access, genedb-db.fulljar-db">
      <compile-target project="access" />
      <iajc-target project="access" />
      <copy todir="${imported.basedir.access}/ant-build/classes" overwrite="true">
        <fileset dir="${imported.basedir.access}/resources" />
        <fileset dir="${imported.basedir.access}/conf" />
      </copy>
  </target>

  <path id="genedb-access.test-libs">
    <path refid="access-classpath"/>
    <pathelement location="${lib-dir}/spring-bundle-2.5.6/junit/junit-4.4.jar"/>
    <pathelement location="${imported.basedir.access}/ant-build/classes"/>
  </path>

  <target name="compile-tests" depends="init-access">
      <mkdir dir="${imported.basedir.access}/ant-build/test-classes"/>
      <javac srcdir="${imported.basedir.access}/test" destdir="${imported.basedir.access}/ant-build/test-classes" debug="true"
          classpathref="genedb-access.test-libs"/>

      <iajc-target project="access" directory="${imported.basedir.access}/ant-build/test-classes"/>

      <copy todir="${imported.basedir.access}/ant-build/test-classes" overwrite="true">
          <fileset dir="${imported.basedir.access}/test">
              <include name="*.properties"/>
          </fileset>
      </copy>
  </target>

  <target name="replace">
      <fail message="The 'load' property must be set" unless="load"/>
      <fail message="The file property-file.${load} does not exist">
          <condition>
              <not>
                  <available file="${imported.basedir.access}/property-file.${load}"/>
              </not>
          </condition>
      </fail>

      <copy file="${imported.basedir.access}/property-file.${load}" tofile="${imported.basedir.access}/resources/project.properties"
          overwrite="true" />
  </target>

  <target name="fulljar-access" depends="replace,compile-access" description="Create JAR file">
    <jar-target project="access"/>
  </target>

    <path id="exec-classpath">
        <path refid="access-classpath" />
    </path>

    <path id="test-classpath">
        <pathelement location="${imported.basedir.access}/ant-build/test-classes"/>
        <pathelement location="${imported.basedir.access}/ant-build/dist/genedb-access.jar"/>
        <path refid="exec-classpath"/>
    </path>

    <target name="all-tests" depends="fulljar-access,compile-tests,
        file-test,location-test,embl-test,ortho-test"/>
    <target name="file-test" depends="fulljar-access,compile-tests">
        <junit showoutput="yes" printsummary="yes" haltonfailure="yes" fork="true">
            <classpath refid="test-classpath"/>
            <formatter type="brief" usefile="false" />
            <test name="org.genedb.db.loading.FastaFileTest"/>
            <test name="org.genedb.db.loading.EmblFileTest"/>
        </junit>
    </target>
    <target name="location-test" depends="fulljar-access,compile-tests">
        <junit showoutput="yes" printsummary="yes" haltonfailure="yes" fork="true">
            <classpath refid="test-classpath"/>
            <formatter type="brief" usefile="false" />
            <test name="org.genedb.db.loading.EmblLocationTest"/>
        </junit>
    </target>
    <target name="check-properties">
        <fail message="The property 'dbhost' is not set. Usually you should set the property 'load' to refer to a property file"
            unless="dbhost"/>
        <fail message="The property 'dbport' is not set. Usually you should set the property 'load' to refer to a property file"
            unless="dbport"/>
        <fail message="The property 'dbname' is not set. Usually you should set the property 'load' to refer to a property file"
            unless="dbname"/>
        <fail message="The property 'dbuser' is not set. Usually you should set the property 'load' to refer to a property file"
            unless="dbuser"/>
    </target>
    <target name="copy-skeleton-database" depends="check-properties">
        <antcall target="genedb-db.make-skeleton-database-if-necessary">
            <param name="source.url"      value="jdbc:postgresql://${dbhost}:${dbport}/${dbname}"/>
            <param name="source.username" value="${dbuser}"/>
        </antcall>

        <copy todir="${imported.basedir.access}/test/data" overwrite="true">
            <fileset dir="${imported.basedir.access}/../genedb-db/test-data/hsqldb" includes="skeleton.*"/>
        </copy>
    </target>
    <target name="embl-test" depends="fulljar-access,compile-tests">
        <antcall target="run-specific-embl-test"><param name="subtest" value="Berghei"/></antcall>
        <antcall target="run-specific-embl-test"><param name="subtest" value="Mansoni"/></antcall>
        <antcall target="run-specific-embl-test"><param name="subtest" value="Synthetic"/></antcall>
    </target>
    <!-- If you antcall a target that has dependencies, all the dependencies are executed
         EVEN IF they have already been executed. Therefore we have an internal target
         run-specific-embl-test, with no dependencies, that we antcall; and an external
         target specific-embl-test that does have dependencies. -->
    <target name="specific-embl-test" depends="fulljar-access,compile-tests,run-specific-embl-test"/>
    <target name="run-specific-embl-test">
        <antcall target="copy-skeleton-database"/>
        <junit showoutput="no" printsummary="yes" haltonfailure="yes" fork="true" maxmemory="256M">
            <classpath refid="test-classpath"/>
            <formatter type="brief" usefile="false" />
            <test name="org.genedb.db.loading.EmblLoader${subtest}Test"/>
        </junit>
    </target>
    <target name="ortho-test" depends="fulljar-access,compile-tests">
        <antcall target="run-specific-ortho-test"><param name="subtest" value="ImplicitCluster"/></antcall>
        <antcall target="run-specific-ortho-test"><param name="subtest" value="Unclustered"/></antcall>
        <antcall target="run-specific-ortho-test"><param name="subtest" value="Clustered"/></antcall>
    </target>
    <target name="specific-ortho-test" depends="fulljar-access,compile-tests,run-specific-ortho-test"/>
    <target name="run-specific-ortho-test">
        <antcall target="copy-skeleton-database"/>
        <junit showoutput="no" printsummary="yes" haltonfailure="yes" fork="true" maxmemory="512M">
            <classpath refid="test-classpath"/>
            <formatter type="brief" usefile="false" />
            <test name="org.genedb.db.loading.OrthologueLoader${subtest}Test"/>
        </junit>
    </target>

    <!--
    <target name="prompt-for-password" depends="genedb-util.anttasks,check-properties" unless="dbpassword">
        <taskdef name="password" classname="org.genedb.anttasks.Password" classpath="${imported.basedir.access}/../genedb-util/ant-build/dist/genedb-anttasks.jar" />
        <password name="dbpassword" prompt="Password for ${dbuser}@jdbc:postgresql://${dbhost}:${dbport}/${dbname}" />
    </target>
    -->

    <target name="load-embl" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.LoadEmbl">
            <sysproperty key="load.organismCommonName" value="${organism}"/>
            <sysproperty key="load.inputDirectory" value="${file}"/>
            <syspropertyset>
                <propertyref builtin="commandline"/>
            </syspropertyset>
            <jvmarg line="-Xmx350M"/>
        </java>
    </target>

    <target name="delete-organism" depends="fulljar-access">
       <sql driver="org.postgresql.Driver"
           url="jdbc:postgresql://${dbhost}:${dbport}/${dbname}"
           userid="${dbuser}" password="${dbpassword}">

           <classpath>
              <pathelement location="${lib-dir}/db/postgresql-8.3-603.jdbc4.jar"/>
           </classpath>

           delete from feature where organism_id in (
               select organism_id from organism where common_name = '${organism}'
           );

           delete from synonym where synonym_id in (
             select synonym_id from synonym
             except (
                 select synonym_id from feature_synonym
                 union
                 select synonym_id from library_synonym
             )
           );
        </sql>
    </target>

    <target name="reload-embl" depends="delete-organism,load-embl"/>

    <target name="load-orthologues" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.LoadOrthologues">
            <sysproperty key="load.organismCommonName" value="${organism}"/>
            <sysproperty key="load.inputDirectory" value="${file}"/>
            <syspropertyset>
                <propertyref builtin="commandline"/>
            </syspropertyset>
            <jvmarg line="-Xmx256M"/>
        </java>
    </target>

    <target name="load-vulgar" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.LoadVulgar">
            <sysproperty key="load.organismCommonName" value="${organism}"/>
            <sysproperty key="load.inputDirectory" value="${file}"/>
            <syspropertyset>
                <propertyref builtin="commandline"/>
            </syspropertyset>
            <jvmarg line="-Xmx768M"/>
        </java>
    </target>


    <target name="load-interpro" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="iploader --key-type=polypeptide ${file}"/>
           <jvmarg line="-server -Xmx256m"/>
        </java>
        <antcall target="delete-redundant-go"/>
    </target>
    <target name="clear-interpro" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearInterPro">
            <arg line="${organism}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="reload-interpro" depends="clear-interpro,load-interpro"/>


    <target name="load-tmhmm" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="tmhmmloader ${file}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="clear-tmhmm" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearTMHMM">
            <arg line="${organism}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="reload-tmhmm" depends="clear-tmhmm,load-tmhmm" />


    <target name="load-dgpi" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="dgpiloader ${file}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="clear-dgpi" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearDGPI">
            <arg line="${organism}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="reload-dgpi" depends="clear-dgpi,load-dgpi" />


    <target name="load-signalp" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="signalploader ${file}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="clear-signalp" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearSignalP">
            <arg line="${organism}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="reload-signalp" depends="clear-signalp,load-signalp"/>


    <target name="load-plasmoap" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="plasmoaploader ${file}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="clear-plasmoap" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearPlasmoAP">
            <arg line="${organism}"/>
            <jvmarg line="-server -Xmx256m"/>
        </java>
    </target>
    <target name="reload-plasmoap" depends="clear-plasmoap,load-plasmoap"/>


    <target name="delete-redundant-go" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.DeleteRedundantGOTerms"/>
    </target>


    <target name="fix-residues-verbose" depends="fulljar-access" if="verbose">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.fixup.FixResidues">
            <arg value="--verbose" />
            <arg line="${organism}"/>
        </java>
    </target>
    <target name="fix-residues-nonverbose" depends="fulljar-access" unless="verbose">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.fixup.FixResidues">
            <arg line="${organism}"/>
        </java>
    </target>
    <target name="fix-residues" depends="fix-residues-verbose, fix-residues-nonverbose" />

    <target name="fix-residues-mansoni" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.fixup.FixResidues">
            <arg value="--verbose" />
            <arg value="--mark-fragments"/>
            <arg value="--guess-frame=force"/>
            <arg value="Smansoni" />
        </java>
    </target>

    <target name="fix-residues-falciparum" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.fixup.FixResidues">
            <arg value="-v" />
            <arg value="Pfalciparum" />
        </java>
    </target>

    <target name="load-opi-references" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.Load">
            <arg line="opi-referencesloader"/>
        </java>
    </target>

    <target name="clear-opi-references" depends="fulljar-access">
        <java fork="true" failonerror="true" classpathref="exec-classpath" classname="org.genedb.db.loading.auxiliary.ClearOPIReferences"/>
    </target>

    <target name="reload-opi-references" depends="clear-opi-references,load-opi-references"/>

    <!-- Note: does not force a recompile; use "ant fulljar-access adhoc-query" for that -->
    <target name="adhoc-query" depends="adhoc-query-verbose, adhoc-query-nonverbose"/>
    <target name="adhoc-query-verbose" if="verbose">
        <java fork="true" classname="org.genedb.db.adhoc.Query" classpathref="exec-classpath">
            <arg value="--verbose"/>
        </java>
    </target>
    <target name="adhoc-query-nonverbose" unless="verbose">
        <java fork="true" classname="org.genedb.db.adhoc.Query" classpathref="exec-classpath"/>
    </target>

</project>
